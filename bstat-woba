#!/usr/bin/env python

import sys
sys.path.append('/Users/luciancooper/projects/pymodule')
import arrpy
import numpy as np
import pandas as pd

from bbmatrix.core import BBMatrix
from bbsim.data import seasonlib
from bbsim.league import REMSim,wOBAWeightSim,LeagueStatSim



def calc_OBP(df):
    # OBP = (S+D+T+HR+BB+HBP)/(AB+BB+HBP+SF)
    n = df[['S','D','T','HR','BB','HBP']].sum(axis=1)
    d = df[['AB','BB','HBP','SF']].sum(axis=1)
    return (n/d).replace([np.inf, -np.inf], np.nan).rename('OBP')


def simREM(data,inx):
    matrix = BBMatrix(inx,REMSim.dcols,dtype=REMSim.dtype)
    sim = REMSim(matrix)
    #print('Simulating REM',file=sys.stderr)
    data.run(sim)
    return matrix

def simMLB(data,inx):
    matrix = BBMatrix(inx,LeagueStatSim.dcols,dtype=LeagueStatSim.dtype)
    sim = SeasonStatSim(matrix)
    #print('Simulating MLB',file=sys.stderr)
    data.run(sim)
    return matrix

def simOBA(data,inx,rem):
    matrix = BBMatrix(inx,wOBAWeightSim.dcols,dtype=wOBAWeightSim.dtype)
    sim = wOBAWeightSim(rem,matrix)
    #print('Simulating wOBA',file=sys.stderr)
    data.run(sim)
    return matrix


LW_STAT = ['BB','HBP','S','D','T','HR']

def main():
    data = seasonlib('bbdata.xml')
    inx = data.yearIndex
    rem = simREM(data,inx)
    oba = simOBA(data,inx,rem)
    mlb = simMLB(data,inx)
    df_oba = oba.df()
    df_mlb = mlb.df()

    adj_lw = pd.concat([(df_oba[x]-df_oba['O']).rename(x) for x in LW_STAT],axis=1)

    #lw = pd.concat([sum([df_oba[x] for x in ['O','E','K']]).rename('O'),df_oba[['BB','IBB','HBP','I','S','D','T','HR']]],axis=1).applymap(float)
    #adj_lw = pd.concat([(lw[x]-lw['O']).rename(x) for x in LW_STAT],axis=1)
    OBP = calc_OBP(df_mlb)
    wOBA = ((df_mlb[LW_STAT]*adj_lw[LW_STAT]).sum(axis=1)/df_mlb[['AB','BB','SF','HBP']].sum(axis=1)).rename('wOBA')
    wOBAScale = (OBP/wOBA).rename('wOBAScale')
    wOBA_lw = adj_lw.mul(wOBAScale,axis=0)
    df = pd.concat([OBP,wOBA,wOBAScale,wOBA_lw],axis=1)
    if not sys.stdout.isatty():
        df.to_csv(sys.stdout,index=True)
        return



if __name__=='__main__':
    main()
