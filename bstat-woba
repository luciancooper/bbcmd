#!/usr/bin/env python

import sys
sys.path.append('/Users/luciancooper/projects/pymodule')
import arrpy
import numpy as np
import pandas as pd

from bbsim.data import seasonlib
from bbsim.woba import REMSim,wOBAWeightSim
from bbsim.league import SeasonStatSim,NPLeagueStatSim







def main():
    # Initiate bb datafiles
    data = seasonlib('bbdata.xml')
    yIndex = data.yearIndex
    # Sim Run Exp Matrix
    rem = REMSim(yIndex)
    data.run(rem)
    # Sim wOBA linear weights
    oba = wOBAWeightSim(yIndex,rem)
    data.run(oba)
    # Sim MLB Batting Stats
    mlb = SeasonStatSim(yIndex)
    data.run(mlb)
    # Sim Non Pitcher League Batting Stats
    lgue = NPLeagueStatSim(data.leagueIndex)
    data.run(lgue)

    # Calculate wOBA weights
    linear_weights = ['BB','HBP','S','D','T','HR']

    # Calc adjusted linear weights
    adjlw = oba.adjWeights()
    # League OBP (On Base Percentage)
    obp = mlb['(S+D+T+HR+BB+HBP)/(AB+BB+HBP+SF)']
    # League wOBA
    woba = (mlb[linear_weights]*adjlw[linear_weights].values).sum(axis=1,keepdims=True)/mlb['AB+BB+SF+HBP']
    # wOBA Scale
    woba_scale = obp / woba
    # Final wOBA linear weights
    lw = adjlw.values * woba_scale

    # DataFrame container linear weights
    #df = pd.DataFrame(np.c_[woba,woba_scale,lw],index=inx.pandas(),columns=['woba','woba_Scale']+linear_weights)
    df_lw = pd.DataFrame(lw,index=yIndex.pandas(),columns=linear_weights)

    lg_df = lgue.df()
    # [BB,HBP,S,D,T,HR]
    (lg_df[linear_weights].groupby('league').apply(lambda x: x * df_lw)).sum(axis=1)
    lg_woba = lgue[linear_weights]
    lgue['AB+BB+SF+HBP']


    R_PA = mlb["R/PA"]


    print(df,file=sys.stderr)

    #adj_lw = pd.concat([(df_oba[x]-df_oba['O']).rename(x) for x in LW_STAT],axis=1)

    #lw = pd.concat([sum([df_oba[x] for x in ['O','E','K']]).rename('O'),df_oba[['BB','IBB','HBP','I','S','D','T','HR']]],axis=1).applymap(float)
    #adj_lw = pd.concat([(lw[x]-lw['O']).rename(x) for x in LW_STAT],axis=1)

    #wOBA = ((df_mlb[LW_STAT]*adj_lw[LW_STAT]).sum(axis=1)/df_mlb[['AB','BB','SF','HBP']].sum(axis=1)).rename('wOBA')
    #wOBAScale = (OBP/wOBA).rename('wOBAScale')
    #wOBA_lw = adj_lw.mul(wOBAScale,axis=0)

    if not sys.stdout.isatty():
        df.to_csv(sys.stdout,index=True)
        return



if __name__=='__main__':
    main()
