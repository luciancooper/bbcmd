#!/usr/bin/env python

import sys
sys.path.append('/Users/luciancooper/projects/pymodule')
from progress import IncrementalBar


##  -r ecode
def raw_ecode(years):
    from bbsource.retro.raw import ECODE
    for y in years:
        with open(f'ecode/{y}.txt','w') as f,ECODE(y) as ecode:
            for l in ecode:
                print("%s,%s"%l,file=f)

##  -r ctx
def raw_ctx(years):
    from bbsource.retro.raw import CTX
    for y in years:
        with open(f'ctx/{y}.txt','w') as f,CTX(y) as ctx:
            for l in ctx:
                print("%s,%s"%l,file=f)
##  -r ros
def raw_ros(years):
    from bbsource.retro.raw import ROS
    for y in years:
        with open(f'ros/{y}.txt','w') as f,ROS(y) as ros:
            for l in ros:
                print("%s,%s"%l,file=f)

##  -r hnd
def raw_hnd(years):
    from bbsource.retro.raw import HND
    for y in years:
        with open(f'hnd/{y}.txt','w') as f,HND(y) as hnd:
            for l in hnd:
                print("%s,%s"%l,file=f)

##  -r dfn
def raw_dfn(years):
    from bbsource.retro.raw import DFN
    for y in years:
        with open(f'dfn/{y}.txt','w') as f,DFN(y) as dfn:
            for l in dfn:
                print("%s,%s"%l,file=f)
## -r mod
def raw_mod(years):
    from bbsource.retro.raw import MOD
    for y in years:
        with open(f'mod/{y}.txt','w') as f,MOD(y) as mod:
            for l in mod:
                print("%s,%s"%l,file=f)


##  -r eve
def raw_eve(years):
    from bbsource.retro.raw import EVE
    for y in years:
        with open(f'eve/{y}.txt','w') as f,EVE(y) as event:
            for l in event:
                print("%s,%s"%l,file=f)

##  -s eve
def sim_eve(years):
    from bbsource.retro.eve import simEVE
    for y in years:
        with open(f'eve/{y}.txt','w') as f:
            for l in simEVE(y):
                print(l,file=f)


##  -s ros
def sim_ros(years):
    from bbsource.retro.misc import simROS
    for y in years:
        with open(f'ros/{y}.txt','w') as f:
            for l in simROS(y):
                print(l,file=f)

##  -s ctx
def sim_ctx(years):
    from bbsource.retro.misc import simCTX
    for y in years:
        with open(f'ctx/{y}.txt','w') as f:
            for l in simCTX(y):
                print(l,file=f)


##  -s team
def sim_team(years):
    from bbsource.retro.misc import simTEAM
    for y in years:
        with open(f'team/{y}.txt','w') as f:
            for l in simTEAM(y):
                print(l,file=f)

##  -s gid
def sim_gid(years):
    from bbsource.retro.misc import simGID
    for y in years:
        with open(f'gid/{y}.txt','w') as f:
            for l in simGID(y):
                print(l,file=f)


### Parse Years
def parse_range(arg):
    y0,y1 = arg.split('-')
    return range(int(y0),int(y1)+1)

def parse_years(arg):
    return [i for j in [[*parse_range(a)] if ('-' in a) else [int(a)] for a in arg.split(',')] for i in j]


def main():
    # ['EVT','CTX','ROS','DFN','MOD','EVENT','EVE','ROSTER','CONTEXT','TEAM','GID']

    import argparse
    parser = argparse.ArgumentParser(description="Baseball Source File Compiler")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-s','--sim',choices=['gid','eve','ros','ctx','team'],help='Compile SIM files')
    group.add_argument('-r','--raw',choices=['ctx','ros','dfn','mod','eve','hnd','ecode'],help='Compile Raw files')
    group.add_argument('--xml',action='store_true',help='Create XML Directory Lookup File')
    #parser.add_argument('type',choices=['gid','eve','ros','ctx','team'],help='File category to compile')
    parser.add_argument('-y','--years',required=True,type=parse_years,help='years to compile')
    #parser.add_argument('-y','--years',required=True,type=parse_years,help='years to compile')


    #parser.add_argument('years',type=parse_years,help='years to download data for')
    #parser.add_argument('outdir',nargs='?',default=os.getcwd(),help='path to download files to')
    #parser.add_argument('-w','--wipe',action='store_true',help='Wipe path before downloading')

    args = parser.parse_args()
    years = args.years
    if args.xml == True:
        from bbsource.retro import writeXML
        writeXML(years)
        print(f'wrote bbindex.xml for {years}')
        return
    if args.sim != None:
        yiter = IncrementalBar(prefix=args.sim).iter(years)
        if args.sim == 'gid':
            sim_gid(yiter)
        elif args.sim == 'eve':
            sim_eve(yiter)
        elif args.sim == 'ros':
            sim_ros(yiter)
        elif args.sim == 'ctx':
            sim_ctx(yiter)
        elif args.sim == 'team':
            sim_team(yiter)
    else:
        yiter = IncrementalBar(prefix=args.raw).iter(years)
        if args.raw == 'ctx':
            raw_ctx(yiter)
        elif args.raw == 'ros':
            raw_ros(yiter)
        elif args.raw == 'dfn':
            raw_dfn(yiter)
        elif args.raw == 'mod':
            raw_mod(yiter)
        elif args.raw == 'eve':
            raw_eve(yiter)
        elif args.raw == 'hnd':
            raw_hnd(yiter)
        elif args.raw == 'ecode':
            raw_ecode(yiter)

    #print('Type: ',args.type)
    #print("Years: ",args.years)

if __name__=='__main__':
    main()
