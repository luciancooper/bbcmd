#!/usr/bin/env python

import sys
sys.path.append('/Users/luciancooper/projects/pymodule')

VALID_CMDS = ['fg-players','fg-advbat','fg-parkfactors']

# arg: 'fg-players'
def fg_players():
    from bbsource.scrape.fg import playerTable
    for l in playerTable(bar=True):
        print(l,file=sys.stdout)

# arg: 'fg-advbat instructionfile [startline]'
def fg_advbat(*args):
    from bbsource.scrape.fg import scrapeAdvancedBatting
    try:
        for l in scrapeAdvancedBatting(*args,bar=True):
            print(l,file=sys.stdout)
    except Exception as e:
        print(e,file=sys.stderr)


def _parse_yeararg(arg):
    if '-' in arg:
        y0,y1 = arg.split('-')
        return [*range(int(y0),int(y1)+1)]
    return [int(arg)]

# arg: 'fg-parkfactors years'
def fg_parkfactor(*args):
    from bbsource.scrape.fg import scrapeParkFactors
    try:
        years = [a for b in [_parse_yeararg(arg) for arg in args] for a in b]
        for l in scrapeParkFactors(years,bar=True):
            print(l,file=sys.stdout)
    except Exception as e:
        print(e,file=sys.stderr)


def main(arg,*args):
    if arg.endswith('-help'):
        print(f"use one of the following options to scrape baseball data: {VALID_CMDS}",file=sys.stderr)
        return
    if arg not in VALID_CMDS:
        print(f"'{arg}' is not a valid option choice",file=sys.stderr)
        return

    if arg == 'fg-players':
        fg_players()
    elif arg == 'fg-advbat':
        if len(args)== 0:
            print('Need to provide path to instruction file',file=sys.stderr)
            return
        fg_advbat(*args)
    elif arg == 'fg-parkfactors':
        if len(args) == 0:
            print('Need to provide years',file=sys.stderr)
            return
        fg_parkfactor(*args)



if __name__=='__main__':
    arg = sys.argv[1]
    main(arg,*sys.argv[2:])
