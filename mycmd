#!/usr/bin/env python

import sys
import io
sys.path.append('/Users/luciancooper/projects/pymodule')


from bbmatrix.core import BBMatrix
from bbsim.data import seasonlib
from bbsim.league import LeagueStatSim
from bbsim.games import ScoreSim,GameStatSim
from bbsim.roster import PIDStatSim,PPIDStatSim


#print("Lucian's Command")

if __name__=='__main__':
    print("sys.stdout",type(sys.stdout),type(sys.stdout)==io.TextIOWrapper)
    print("sys.stderr",type(sys.stderr),type(sys.stderr)==io.TextIOWrapper)


# bbstat-mlb


def bbstat_mlb():
    data = seasonlib('bbdata.xml')
    matrix = BBMatrix(data.yearIndex,LeagueStatSim.dcols,dtype=LeagueStatSim.dtype)
    sim = LeagueStatSim(matrix)
    data.run(sim)
    if not sys.stdout.isatty():
        matrix.to_csv(sys.stdout)
        return



# bgame-score

def bgame_score():
    data = seasonlib('bbdata.xml')
    matrix = BBMatrix(data.gidIndex,ScoreSim.dcols,dtype=ScoreSim.dtype)
    sim = ScoreSim(matrix)
    data.run(sim)
    if not sys.stdout.isatty():
        matrix.to_csv(sys.stdout)
        return

# bgame-stat

def bgame_stat():
    data = seasonlib('bbdata.xml')
    matrix = BBMatrix(data.gidTeamIndex,GameStatSim.dcols,dtype=GameStatSim.dtype)
    sim = GameStatSim(matrix)
    data.run(sim)
    if not sys.stdout.isatty():
        matrix.to_csv(sys.stdout)
        return


# bstat-pid

def bstat_pid():
    data = seasonlib('bbdata.xml')
    matrix = BBMatrix(data.pidIndex,PIDStatSim.dcols,dtype=PIDStatSim.dtype)
    sim = PIDStatSim(matrix)
    data.run(sim)
    if not sys.stdout.isatty():
        matrix.to_csv(sys.stdout)
        return


# bstat-ppid

def bstat_ppid():
    data = seasonlib('bbdata.xml')
    matrix = BBMatrix(data.ppidIndex,PPIDStatSim.dcols,dtype=PPIDStatSim.dtype)
    sim = PPIDStatSim(matrix)
    data.run(sim)
    if not sys.stdout.isatty():
        matrix.to_csv(sys.stdout)
        return






# bstat-woba
