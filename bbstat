#!/usr/bin/env python

import sys

from bbsim.data import seasonlib

###################################################[By Player]###################################################

# arg: -r batting
def player_batting(data,verify):
    from bbsim.player import PlayerBattingStatSim
    sim = PlayerBattingStatSim(data.pidIndex,safe=verify)
    data.run(sim)
    return sim

# arg: -r pitching
def player_pitching(data,verify):
    from bbsim.player import PlayerPitchingStatSim
    sim = PlayerPitchingStatSim(data.ppidIndex,safe=verify)
    data.run(sim)
    return sim



# arg: -r hbatting
def player_hand_batting(data,verify):
    from bbsim.player_handed import HandedPlayerBattingStatSim
    sim = HandedPlayerBattingStatSim(data.pidHandedIndex,safe=verify)
    data.run(sim)
    return sim

# arg: -r hpitching
def player_hand_pitching(data,verify):
    from bbsim.player_handed import HandedPlayerPitchingStatSim
    sim = HandedPlayerPitchingStatSim(data.ppidHandedIndex,safe=verify)
    data.run(sim)
    return sim

###################################################[By Game]###################################################

# arg: -g stats
def game_stats(data,verify):
    from bbsim.games import GameStatSim
    sim = GameStatSim(data.gidTeamIndex,safe=verify)
    data.run(sim)
    return sim

# arg: -g score
def game_score(data,verify):
    from bbsim.games import GameScoreSim
    sim = GameScoreSim(data.gidIndex,safe=verify)
    data.run(sim)
    return sim

###################################################[By Season]###################################################

# arg: -s stats
def season_stats(data,verify):
    from bbsim.league import SeasonStatSim
    sim = SeasonStatSim(data.yearIndex,safe=verify)
    data.run(sim)
    return sim

# arg: -s rpo
def season_rpo(data,verify):
    from bbsim.games import RPOSim
    sim = RPOSim(data.yearIndex,safe=verify)
    data.run(sim)
    return sim

# arg: -s rppa
def season_rppa(data,verify):
    from bbsim.games import RPPASim
    sim = RPPASim(data.yearIndex,safe=verify)
    data.run(sim)
    return sim

# arg: -s rpw
def season_rpw(data,verify):
    from bbsim.games import RPWSim
    sim = RPWSim(data.yearIndex,safe=verify)
    data.run(sim)
    return sim

###################################################[By League]###################################################

# arg: -l stats
def league_stats(data,verify):
    from bbsim.league import SeasonStatSim
    sim = SeasonStatSim(data.leagueIndex,safe=verify)
    data.run(sim)
    return sim

# arg: -l nopitcher
def league_nopitcher(data,verify):
    from bbsim.league import NPLeagueStatSim
    sim = NPLeagueStatSim(data.leagueIndex,safe=verify)
    data.run(sim)
    return sim

###################################################[Appearance]###################################################

# arg: -a normal
def appearance_normal(data,verify):
    from bbsim.appearance import AppearanceSim
    sim = AppearanceSim(data.pidIndex,safe=verify)
    data.run(sim)
    return sim

# arg: -a lahman
def appearance_lahman(data,verify):
    from bbsim.appearance import LahmanAppearanceSim
    sim = LahmanAppearanceSim(data.pidIndex,safe=verify)
    data.run(sim)
    return sim

# arg: -a position
def appearance_position(data,verify):
    from bbsim.player import PlayerPositionOutSim
    sim = PlayerPositionOutSim(data.pidIndex,safe=verify)
    data.run(sim)
    return sim

# arg: -a simple
def appearance_gappear(data,verify):
    from bbsim.gappear import GAppearanceSim
    sim = GAppearanceSim(data.pidIndex,safe=verify)
    data.run(sim)
    return sim

###################################################[Calculations]###################################################


# arg: -c woba
def calc_woba(data,verify):
    import numpy as np
    import pandas as pd
    from bbsim.woba import REMSim,wOBAWeightSim
    from bbsim.league import SeasonStatSim
    yIndex = data.yearIndex
    # Sim Run Exp Matrix
    rem = REMSim(yIndex,safe=verify)
    data.run(rem)
    # Sim wOBA linear weights
    oba = wOBAWeightSim(yIndex,rem,safe=verify)
    data.run(oba)
    # Sim MLB Batting Stats
    mlb = SeasonStatSim(yIndex,safe=verify)
    data.run(mlb)
    # Calculate wOBA weights
    linear_weights = ['BB','HBP','S','D','T','HR']
    # Calc adjusted linear weights
    adjlw = oba.adjWeights()
    # League OBP (On Base Percentage)
    obp = mlb['(S+D+T+HR+BB+HBP)/(AB+BB+HBP+SF)']
    # League wOBA
    woba = (mlb[linear_weights]*adjlw[linear_weights].values).sum(axis=1,keepdims=True)/mlb['AB+BB+SF+HBP']
    # wOBA Scale
    woba_scale = obp / woba
    # Final wOBA linear weights
    lw = adjlw.values * woba_scale
    # DataFrame container linear weights
    df = pd.DataFrame(np.c_[woba,woba_scale,lw],index=yIndex.pandas(),columns=['woba','woba_Scale']+linear_weights)
    print(df,file=sys.stderr)
    return df

# arg: -c war
def calc_war(data,verify):
    ### INCOMPLETE #####
    import numpy as np
    import pandas as pd
    from bbsim.woba import REMSim,wOBAWeightSim
    from bbsim.league import SeasonStatSim,NPLeagueStatSim

    yIndex = data.yearIndex
    # Sim Run Exp Matrix
    rem = REMSim(yIndex,safe=verify)
    data.run(rem)
    # Sim wOBA linear weights
    oba = wOBAWeightSim(yIndex,rem,safe=verify)
    data.run(oba)
    # Sim MLB Batting Stats
    mlb = SeasonStatSim(yIndex,safe=verify)
    data.run(mlb)

    # Sim Non Pitcher League Batting Stats
    lgue = NPLeagueStatSim(data.leagueIndex)
    data.run(lgue)

    # Calculate wOBA weights
    linear_weights = ['BB','HBP','S','D','T','HR']

    # Calc adjusted linear weights
    adjlw = oba.adjWeights()
    # League OBP (On Base Percentage)
    obp = mlb['(S+D+T+HR+BB+HBP)/(AB+BB+HBP+SF)']
    # League wOBA
    woba = (mlb[linear_weights]*adjlw[linear_weights].values).sum(axis=1,keepdims=True)/mlb['AB+BB+SF+HBP']
    # wOBA Scale
    woba_scale = obp / woba
    # Final wOBA linear weights
    lw = adjlw.values * woba_scale

    # DataFrame container linear weights
    #df = pd.DataFrame(np.c_[woba,woba_scale,lw],index=inx.pandas(),columns=['woba','woba_Scale']+linear_weights)
    df_lw = pd.DataFrame(lw,index=yIndex.pandas(),columns=linear_weights)

    lg_df = lgue.df()
    # [BB,HBP,S,D,T,HR]
    (lg_df[linear_weights].groupby('league').apply(lambda x: x * df_lw)).sum(axis=1)
    lg_woba = lgue[linear_weights]
    lgue['AB+BB+SF+HBP']

    R_PA = mlb["R/PA"]
    print(df,file=sys.stderr)
    return df



###################################################[Tests]###################################################

# arg: -t game
def test_game(data,verify):
    from bbsim.core.game import GameSim
    sim = GameSim(safe=verify)
    data.run(sim)
    return sim

# arg: -t roster
def test_roster(data,verify):
    from bbsim.core.roster import RosterSim
    sim = RosterSim(safe=verify)
    data.run(sim)
    return sim

# arg: -t handed
def test_handed(data,verify):
    from bbsim.core.handed import HandedRosterSim
    sim = HandedRosterSim(safe=verify)
    data.run(sim)
    return sim



######################################################################################################

if __name__=='__main__':
    import argparse
    parser = argparse.ArgumentParser(description="Baseball Game Simulator")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-r','--roster',choices=['batting','pitching','hbatting','hpitching'],help='Group by player')
    group.add_argument('-g','--games',choices=['stats','score'],help='Group by games')
    group.add_argument('-s','--season',choices=['stats','rpo','rppa','rpw'],help='Group by season')
    group.add_argument('-l','--league',choices=['stats','nopitcher'],help='Group by league')
    group.add_argument('-c','--calc',choices=['woba'],help='More complex calculation')
    group.add_argument('-a','--appearance',choices=['position','simple','normal','lahman'],help='Calculate each players appearance in each game')
    group.add_argument('-t','--test',choices=['game','roster','handed'],help='Run tests on simulators')
    parser.add_argument('-v','--verify',action='store_true',help='Verify simulator with context files')
    args = parser.parse_args()
    data = seasonlib('bbdata.xml')
    if args.roster != None:
        if args.roster == 'batting':
            sim = player_batting(data,args.verify)
        elif args.roster == 'pitching':
            sim = player_pitching(data,args.verify)
        elif args.roster == 'hbatting':
            sim = player_hand_batting(data,args.verify)
        elif args.roster == 'hpitching':
            sim = player_hand_pitching(data,args.verify)
    elif args.games != None:
        if args.games == 'stats':
            sim = game_stats(data,args.verify)
        elif args.games == 'score':
            sim = game_score(data,args.verify)
    elif args.season != None:
        if args.season == 'stats':
            sim = season_stats(data,args.verify)
        elif args.season == 'rpo':
            sim = season_rpo(data,args.verify)
        elif args.season == 'rppa':
            sim = season_rppa(data,args.verify)
        elif args.season == 'rpw':
            sim = season_rpw(data,args.verify)
    elif args.league != None:
        if args.league == 'stats':
            sim = league_stats(data,args.verify)
        elif args.league == 'nopitcher':
            sim = league_nopitcher(data,args.verify)
    elif args.calc != None:
        if args.calc == 'woba':
            sim = calc_woba(data,args.verify)
    elif args.appearance != None:
        if args.appearance == 'normal':
            sim = appearance_normal(data,args.verify)
        elif args.appearance == 'lahman':
            sim = appearance_lahman(data,args.verify)
        elif args.appearance == 'position':
            sim = appearance_position(data,args.verify)
        elif args.appearance == 'simple':
            sim = appearance_gappear(data,args.verify)
    elif args.test != None:
        if args.test == 'game':
            sim = test_game(data,args.verify)
        elif args.test == 'roster':
            sim = test_roster(data,args.verify)
        elif args.test == 'handed':
            sim = test_handed(data,args.verify)

    if not sys.stdout.isatty():
        sim.to_csv(sys.stdout)
